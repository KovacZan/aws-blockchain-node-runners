"use strict";(self.webpackChunkaws_blockchain_node_runners=self.webpackChunkaws_blockchain_node_runners||[]).push([[730],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},20:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>k,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={toc:[{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Well-Architected",id:"well-architected",level:2},{value:"Well-Architected Checklist",id:"well-architected-checklist",level:3},{value:"Solution Walkthrough",id:"solution-walkthrough",level:2},{value:"Setup Cloud9",id:"setup-cloud9",level:3},{value:"Clone this repository and install dependencies",id:"clone-this-repository-and-install-dependencies",level:3},{value:"Deploy Sync Node",id:"deploy-sync-node",level:3},{value:"Deploy the RPC Nodes",id:"deploy-the-rpc-nodes",level:3},{value:"Clearing up and undeploying everything",id:"clearing-up-and-undeploying-everything",level:3},{value:"FAQ",id:"faq",level:3}]},l="wrapper";function i(e){let{components:t,...i}=e;return(0,r.kt)(l,(0,a.Z)({},o,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sample-aws-blockchain-node-runner-app-for-ethereum-nodes"},"Sample AWS Blockchain Node Runner app for Ethereum Nodes"),(0,r.kt)("h2",{id:"architecture-overview"},"Architecture Overview"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Architecture",src:n(1307).Z,width:"1131",height:"631"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"An ongoing data synchronization process is configured with nodes in the Ethereum network with a sync node and RPC nodes."),(0,r.kt)("li",{parentName:"ol"},"The sync node is used to create a copy of node's state data in Amazon S3 bucket."),(0,r.kt)("li",{parentName:"ol"},"When new RPC nodes are provisioned, they copy state data from Amazon S3 bucket to speed up the initial sync process."),(0,r.kt)("li",{parentName:"ol"},"Applications and smart contract development tools access highly available RPC nodes behind the Application Load Balancer.")),(0,r.kt)("h2",{id:"well-architected"},"Well-Architected"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Review the for pros and cons of this solution."),(0,r.kt)("h3",{id:"well-architected-checklist"},"Well-Architected Checklist"),(0,r.kt)("p",null,"This is the Well-Architected checklist for Ethereum nodes implementation of the AWS Blockchain Node Runner app. This checklist takes into account questions from the ",(0,r.kt)("a",{parentName:"p",href:"https://aws.amazon.com/architecture/well-architected/"},"AWS Well-Architected Framework")," which are relevant to this workload. Please feel free to add more checks from the framework if required for your workload."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Pillar"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Control"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Question/Check"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Remarks"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Security"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Network protection"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Are there unnecessary open ports in security groups?"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Please note that Erigon snap sync port remains open for non-erigon clients, i.e. Port 42069 (TCP/UDP).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Traffic inspection"),(0,r.kt)("td",{parentName:"tr",align:"left"},"AWS WAF could be implemented for traffic inspection. Additional charges will apply.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Compute protection"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Reduce attack surface"),(0,r.kt)("td",{parentName:"tr",align:"left"},"This solution uses Amazon Linux 2 AMI. You may choose to run hardening scripts on it.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Enable people to perform actions at a distance"),(0,r.kt)("td",{parentName:"tr",align:"left"},"This solution uses AWS Systems Manager for terminal session, not ssh ports.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Data protection at rest"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Use encrypted Amazon Elastic Block Store (Amazon EBS) volumes"),(0,r.kt)("td",{parentName:"tr",align:"left"},"This solution uses encrypted Amazon EBS volumes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Use encrypted Amazon Simple Storage Service (Amazon S3) buckets"),(0,r.kt)("td",{parentName:"tr",align:"left"},"This solution uses Amazon S3 managed keys (SSE-S3) encryption.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Data protection in transit"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Use TLS"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The AWS Application Load balancer currently uses HTTP listener. Create HTTPS listener with self signed certificate if TLS is desired.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Authorization and access control"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Use instance profile with Amazon Elastic Compute Cloud (Amazon EC2) instances"),(0,r.kt)("td",{parentName:"tr",align:"left"},"This solution uses AWS Identity and Access Management (AWS IAM) role instead of IAM user.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Following principle of least privilege access"),(0,r.kt)("td",{parentName:"tr",align:"left"},'In sync node, root user is not used (using special user "ethereum" instead").')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Application security"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Security focused development practices"),(0,r.kt)("td",{parentName:"tr",align:"left"},"cdk-nag is being used with appropriate suppressions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Cost optimization"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Service selection"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Use cost effective resources"),(0,r.kt)("td",{parentName:"tr",align:"left"},"AWS Graviton-based Amazon EC2 instances are being used, which are cost effective compared to Intel/AMD instances.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Cost awareness"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Estimate costs"),(0,r.kt)("td",{parentName:"tr",align:"left"},"One sync node with m7g.2xlarge for geth-lighthouse configuration (2048GB ssd) will cost around US$430 per month in the US East (N. Virginia) region. Additional charges will apply if you choose to deploy RPC nodes with load balancer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Reliability"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Resiliency implementation"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Withstand component failures"),(0,r.kt)("td",{parentName:"tr",align:"left"},"This solution uses AWS Application Load Balancer with RPC nodes for high availability. If sync node fails, Amazon S3 backup can be used to reinstate the nodes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Data backup"),(0,r.kt)("td",{parentName:"tr",align:"left"},"How is data backed up?"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Data is backed up to Amazon S3 using ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/peak/s5cmd"},"s5cmd")," tool.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Resource monitoring"),(0,r.kt)("td",{parentName:"tr",align:"left"},"How are workload resources monitored?"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Resources are being monitored using Amazon CloudWatch dashboards. Amazon CloudWatch custom metrics are being pushed via CloudWatch Agent.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Performance efficiency"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Compute selection"),(0,r.kt)("td",{parentName:"tr",align:"left"},"How is compute solution selected?"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Compute solution is selected based on best price-performance, i.e. AWS Graviton-based Amazon EC2 instances.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Storage selection"),(0,r.kt)("td",{parentName:"tr",align:"left"},"How is storage solution selected?"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Storage solution is selected based on best price-performance, i.e. gp3 Amazon EBS volumes with optimal IOPS and throughput.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Architecture selection"),(0,r.kt)("td",{parentName:"tr",align:"left"},"How is the best performance architecture selected?"),(0,r.kt)("td",{parentName:"tr",align:"left"},"s5cmd tool has been chosen for Amazon S3 uploads/downloads because it gives better price-performance compared to Amazon EBS snapshots (including Fast Snapshot Restore, which can be expensive).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Operational excellence"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Workload health"),(0,r.kt)("td",{parentName:"tr",align:"left"},"How is health of workload determined?"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Health of workload is determined via AWS Application Load Balancer Target Group Health Checks, on port 8545.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"Sustainability"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Hardware & services"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Select most efficient hardware for your workload"),(0,r.kt)("td",{parentName:"tr",align:"left"},"This solution uses AWS Graviton-based Amazon EC2 instances which offer the best performance per watt of energy use in Amazon EC2."))))),(0,r.kt)("h2",{id:"solution-walkthrough"},"Solution Walkthrough"),(0,r.kt)("h3",{id:"setup-cloud9"},"Setup Cloud9"),(0,r.kt)("p",null,"We will use AWS Cloud9 to execute the subsequent commands. Follow the instructions in ",(0,r.kt)("a",{parentName:"p",href:"../../docs/setup-cloud9.md"},"Cloud9 Setup")),(0,r.kt)("h3",{id:"clone-this-repository-and-install-dependencies"},"Clone this repository and install dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"   git clone https://github.com/aws-samples/aws-blockchain-node-runners.git\n   cd aws-blockchain-node-runners\n   npm install\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE:")," In this tutorial we will set all major configuration through environment variables, but you also can modify parameters in ",(0,r.kt)("inlineCode",{parentName:"p"},"config/config.ts"),"."),(0,r.kt)("h3",{id:"deploy-sync-node"},"Deploy Sync Node"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Make sure you are in the root directory of the cloned repository")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If you have deleted or don't have the default VPC, create default VPC"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"    aws ec2 create-default-vpc\n")),(0,r.kt)("p",null,"   ",(0,r.kt)("strong",{parentName:"p"},"NOTE:")," You may see the following error if the default VPC already exists: ",(0,r.kt)("inlineCode",{parentName:"p"},"An error occurred (DefaultVpcAlreadyExists) when calling the CreateDefaultVpc operation: A Default VPC already exists for this account in this region."),". That means you can just continue with the following steps."),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Configure  your setup")),(0,r.kt)("p",null,"Create your own copy of ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file and edit it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"   # Make sure you are in aws-blockchain-node-runners/lib/ethereum\n   cd lib/ethereum\n   pwd\n   cp .env-sample .env\n   nano .env\n")),(0,r.kt)("p",null,"   ",(0,r.kt)("strong",{parentName:"p"},"NOTE:")," Example configuration parameters are set in the local ",(0,r.kt)("inlineCode",{parentName:"p"},".env-sample")," file. You can find more examples inside ",(0,r.kt)("inlineCode",{parentName:"p"},"sample-configs")," directory."),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Deploy common components such as IAM role, and Amazon S3 bucket to store data snapshots")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"   pwd\n   # Make sure you are in aws-blockchain-node-runners/lib/ethereum\n   npx cdk deploy eth-common\n")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"Deploy Sync Node")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"   pwd\n   # Make sure you are in aws-blockchain-node-runners/lib/ethereum\n   npx cdk deploy eth-sync-node --json --outputs-file sync-node-deploy.json\n")),(0,r.kt)("p",null,"   ",(0,r.kt)("strong",{parentName:"p"},"NOTE:")," The default VPC must have at least two public subnets in different Availability Zones, and public subnet must set ",(0,r.kt)("inlineCode",{parentName:"p"},"Auto-assign public IPv4 address")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"YES")),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"After starting the node you need to wait for the inital syncronization process to finish. It may take from half a day to about 6-10 days depending on the client combination and the state of the network. You can use Amazon CloudWatch to track the progress. There is a script that publishes CloudWatch metrics every 5 minutes, where you can watch ",(0,r.kt)("inlineCode",{parentName:"p"},"sync distance")," for consensus client and ",(0,r.kt)("inlineCode",{parentName:"p"},"blocks behind")," for execution client. When the node is fully synced those two metrics shold show 0. To see them:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Navigate to ",(0,r.kt)("a",{parentName:"li",href:"https://console.aws.amazon.com/cloudwatch/"},"CloudWatch service")," (make sure you are in the region you have specified for ",(0,r.kt)("inlineCode",{parentName:"li"},"AWS_REGION"),")"),(0,r.kt)("li",{parentName:"ul"},"Open ",(0,r.kt)("inlineCode",{parentName:"li"},"Dashboards")," and select ",(0,r.kt)("inlineCode",{parentName:"li"},"eth-sync-node-<your-eth-client-combination>")," from the list of dashboards.")))),(0,r.kt)("p",null,"Once synchronization process is over, the script will automatically stop both clients and copy all the contents of the ",(0,r.kt)("inlineCode",{parentName:"p"},"/data")," directory to your snapshot S3 bucket. That may take from 30 minutes to about 2 hours. During the process on the dashboard you will see lower CPU and RAM utilization but high data disc throughput and outbound network traffic. The script will automatically start the clients after the process is done."),(0,r.kt)("p",null,"Note: the snapshot backup process will automatically run ever day at midnight time of the time zone were the sync node runs. To change the schedule, modify ",(0,r.kt)("inlineCode",{parentName:"p"},"crontab")," of the root user on the node's EC2 instance."),(0,r.kt)("h3",{id:"deploy-the-rpc-nodes"},"Deploy the RPC Nodes"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Configure and deploy 2 RPC Nodes")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"   pwd\n   # Make sure you are in aws-blockchain-node-runners/lib/ethereum\n   npx cdk deploy eth-rpc-nodes --json --outputs-file rpc-node-deploy.json\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Give the new RPC nodes about 30 minutes (up to 2 hours for Erigon) to initialize and then run the following query against the load balancer behind the RPC node created")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'    export ETH_RPC_ABL_URL=$(cat rpc-node-deploy.json | jq -r \'..|.ALBURL? | select(. != null)\')\n    echo $ETH_RPC_ABL_URL\n    \n    # We query token balance of Beacon deposit contract: https://etherscan.io/address/0x00000000219ab540356cbb839cbe05303d7705fa\n    curl http://$ETH_RPC_ABL_URL:8545 -X POST -H "Content-Type: application/json" \\\n    --data \'{"method":"eth_getBalance","params":["0x00000000219ab540356cBB839Cbe05303d7705Fa", "latest"],"id":1,"jsonrpc":"2.0"}\'\n')),(0,r.kt)("p",null,"The result should be like this (the actual balance might change):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'   {"jsonrpc":"2.0","id":1,"result":"0xe791d050f91d9949d344d"}\n')),(0,r.kt)("p",null,"   If the nodes are still starting and catching up with the chain, you will see the following repsonse:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-HTML"},"   <html>\n   <head><title>503 Service Temporarily Unavailable</title></head>\n   <body>\n   <center><h1>503 Service Temporarily Unavailable</h1></center>\n   </body>\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE:")," By default and for security reasons the load balancer is available only from wihtin the default VPC in the region where it is deployed. It is not available from the Internet and is not open for external connections. Before opening it up please make sure you protect your RPC APIs. "),(0,r.kt)("h3",{id:"clearing-up-and-undeploying-everything"},"Clearing up and undeploying everything"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Undeploy RPC Nodes, Sync Nodes and Comon components")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"   # Setting the AWS account id and region in case local .env file is lost\n    export AWS_ACCOUNT_ID=<your_target_AWS_account_id>\n    export AWS_REGION=<your_target_AWS_region>\n   \n   pwd\n   # Make sure you are in aws-blockchain-node-runners/lib/ethereum\n   \n   # Undeploy RPC Nodes\n    cdk destroy rpc-nodes-stack\n\n    # Undeploy Sync Node\n    cdk destroy sync-node-stack\n\n    # Delete all common components like IAM role and Security Group\n    cdk destroy common-stack\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Follow steps to delete the Cloud9 instance in ",(0,r.kt)("a",{parentName:"li",href:"../../doc/setup-cloud9.md"},"Cloud9 Setup"))),(0,r.kt)("h3",{id:"faq"},"FAQ"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"How to check the logs of the clients running on my sync node?"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Note:")," In this tutorial we chose not to use SSH and use Session Manager instead. That allows you to log all sessions in AWS CloudTrail to see who logged into the server and when. If you receive an error similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"SessionManagerPlugin is not found"),", ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html"},"install Session Manager plugin for AWS CLI")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"   pwd\n   # Make sure you are in aws-blockchain-node-runners/lib/ethereum\n\n   export INSTANCE_ID=$(cat sync-node-deploy.json | jq -r '..|.sync-node-instance-id? | select(. != null)')\n   echo \"INSTANCE_ID=\" $INSTANCE_ID\n   aws ssm start-session --target $INSTANCE_ID --region $AWS_REGION\n   sudo su ethereum\n   # Execution client logs:\n   docker logs --tail 50 execution -f\n   # Consensus client logs:\n   docker logs --tail 50 consensus -f\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"How to check the logs from the EC2 user-data script?")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"   pwd\n   # Make sure you are in aws-blockchain-node-runners/lib/ethereum\n\n   export INSTANCE_ID=$(cat sync-node-deploy.json | jq -r '..|.sync-node-instance-id? | select(. != null)')\n   echo \"INSTANCE_ID=\" $INSTANCE_ID\n   aws ssm start-session --target $INSTANCE_ID --region $AWS_REGION\n   sudo cat /var/log/cloud-init-output.log\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"I'm running sync node with Ethereum and Prysm or Lighthouse and it gets stuck during syncing, what should I do?")),(0,r.kt)("p",null,"Usually restart helps Erigon client to re-connect with other nodes and continue syncing. To restart do the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"   pwd\n   # Make sure you are in aws-blockchain-node-runners/lib/ethereum\n\n   export INSTANCE_ID=$(cat sync-node-deploy.json | jq -r '..|.sync-node-instance-id? | select(. != null)')\n   echo \"INSTANCE_ID=\" $INSTANCE_ID\n   aws ssm start-session --target $INSTANCE_ID --region $AWS_REGION\n   sudo su ethereum\n   /usr/local/bin/docker-compose -f /home/ethereum/docker-compose.yml down\n   /usr/local/bin/docker-compose -f /home/ethereum/docker-compose.yml up -d\n")))}i.isMDXComponent=!0;const s={sidebar_position:2,sidebar_label:"Ethereum"},c="",d={unversionedId:"Blueprints/Ethereum",id:"Blueprints/Ethereum",title:"",description:"",source:"@site/docs/Blueprints/Ethereum.md",sourceDirName:"Blueprints",slug:"/Blueprints/Ethereum",permalink:"/aws-blockchain-node-runners/docs/Blueprints/Ethereum",draft:!1,editUrl:"https://github.com/aws-samples/aws-blockchain-node-runners/website/docs/Blueprints/Ethereum.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Ethereum"},sidebar:"sidebar",previous:{title:"About blueprints",permalink:"/aws-blockchain-node-runners/docs/Blueprints/intro"},next:{title:"Solana",permalink:"/aws-blockchain-node-runners/docs/Blueprints/Solana"}},p={},u=[],m={toc:u},h="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:""}),(0,r.kt)(i,{mdxType:"Readme"}))}k.isMDXComponent=!0},1307:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Architecture-cf2061ac2c66dd1dcfe70d817a2aa2d3.png"}}]);